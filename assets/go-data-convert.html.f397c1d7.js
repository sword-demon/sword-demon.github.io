import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as t}from"./app.91534c1d.js";const p={},e=t(`<h2 id="\u7B80\u5355\u7684\u6848\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u7684\u6848\u4F8B" aria-hidden="true">#</a> \u7B80\u5355\u7684\u6848\u4F8B</h2><p>\u4E00\u6BB5<code>C++</code>\u4EE3\u7801\u6848\u4F8B</p><div class="language-c++ ext-c++ line-numbers-mode"><pre class="language-c++"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    int a = 5;
    float b = 6.2;
    a = b; // \u8FD9\u91CC\u505A\u4E86\u9690\u5F0F\u7684\u7C7B\u578B\u8F6C\u6362
    count &lt;&lt; a &lt;&lt; endl;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8F93\u51FA\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u8F93\u51FA\uFF1A6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>\u4F46\u662F\u5728 go \u8BED\u8A00\u4E2D\u4E0D\u652F\u6301\u8FD9\u6837\u7684\u8F6C\u6362\u3002</p><p>\u4F46\u662F\u5E38\u91CF\u5230\u53D8\u91CF\u4E4B\u95F4\u8FD8\u662F\u4F1A\u8FDB\u884C\u9690\u5F0F\u8F6C\u6362\u7684</p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// b\u662F\u4E00\u4E2A\u53D8\u91CF 5.0\u662F\u4E00\u4E2A\u5E38\u91CF</span>
<span class="token comment">// \u8FD9\u4E24\u8005\u4E4B\u95F4\u662F\u652F\u6301\u9690\u5F0F\u8F6C\u6362\u7684</span>
<span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5.0</span>
<span class="token comment">// \u80FD\u591F\u6267\u884C\u6210\u529F\uFF0C\u4E14\u505A\u4E86\u8F6C\u6362</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

c <span class="token operator">:=</span> <span class="token number">5.0</span>
<span class="token comment">// \u8F93\u51FA float64</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F46\u662F\u8FD9\u8FB9\u4E5F\u662F\u975E\u5E38\u4E25\u683C\u7684\uFF0C\u6BD4\u5982\u5E38\u91CF\uFF1A<code>5.1</code>\u5C31\u4E0D\u80FD\u8FDB\u884C\u8D4B\u503C</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>c <span class="token operator">:=</span> <span class="token number">5.0</span>
<span class="token comment">// \u8F93\u51FA float64</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>

<span class="token keyword">var</span> d <span class="token builtin">int</span> <span class="token operator">=</span> c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Cannot use &#39;c&#39; (type float64) as the type int</code></p><blockquote><p>\u53D8\u91CF\u8D4B\u503C\u7ED9\u53E6\u5916\u4E00\u4E2A\u7C7B\u578B\u7684\u53D8\u91CF\uFF0C\u7C7B\u578B\u4E0D\u4E00\u81F4\uFF0C\u8FD9\u6837\u662F\u4E0D\u652F\u6301\u9690\u5F0F\u8F6C\u6362\u7684\u3002</p></blockquote><h2 id="\u7B80\u5355\u7684\u8F6C\u6362\u64CD\u4F5C" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u7684\u8F6C\u6362\u64CD\u4F5C" aria-hidden="true">#</a> \u7B80\u5355\u7684\u8F6C\u6362\u64CD\u4F5C</h2><h2 id="\u7B80\u5355\u7684\u8F6C\u6362\u64CD\u4F5C-1" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u7684\u8F6C\u6362\u64CD\u4F5C-1" aria-hidden="true">#</a> \u7B80\u5355\u7684\u8F6C\u6362\u64CD\u4F5C</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>valueOfTypeB<span class="token operator">=</span> <span class="token function">typeB</span><span class="token punctuation">(</span>valueOfTypeA<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>\u5728 go \u8BED\u8A00\u4E2D\u4E0D\u652F\u6301<code>\u53D8\u91CF</code>\u95F4\u7684\u9690\u5F0F\u7C7B\u578B\u8F6C\u6362</strong></p><p>\u663E\u793A\u7C7B\u578B\u8F6C\u6362\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>c <span class="token operator">:=</span> <span class="token number">5.1</span>
<span class="token comment">// \u8F93\u51FA float64</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>

<span class="token keyword">var</span> d <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">\u4E0D\u662F\u6240\u6709\u7684\u90FD\u80FD\u8F6C\u6362</p><p><code>Cannot convert an expression of the type &#39;string&#39; to the type &#39;int&#39;</code></p><p>\u4F8B\u5982\u5B57\u6BCD\u683C\u5F0F\u7684<code>string</code>\u7C7B\u578B<code>abcd</code>\u5C31\u4E0D\u80FD\u8F6C\u6362\u4E3A<code>int</code>\u3002</p><p>\u4F4E\u7CBE\u5EA6\u8F6C\u6362\u4E3A\u9AD8\u7CBE\u5EA6\u662F\u5B89\u5168\u7684\uFF0C\u9AD8\u7CBE\u5EA6\u7684\u503C\u8F6C\u6362\u4E3A\u4F4E\u7CBE\u5EA6\u7684\u503C\u65F6\u4F1A\u4E22\u5931\u6570\u636E\uFF0C\u4F8B\u5982<code>int32</code>\u8F6C\u6362\u4E3A<code>int16</code></p><p>\u8FD9\u79CD\u7B80\u5355\u7684\u8F6C\u6362\u65B9\u5F0F\u4E0D\u80FD\u5BF9<code>int(float)</code>\u548C<code>string</code>\u8FDB\u884C\u4E92\u8F6C\uFF0C\u8981\u8DE8\u5927\u7C7B\u578B\u8F6C\u6362\uFF0C\u53EF\u4EE5\u4F7F\u7528<code>strconv</code>\u5305\u63D0\u4F9B\u7684\u51FD\u6570\u3002</p></div><h2 id="strconv" tabindex="-1"><a class="header-anchor" href="#strconv" aria-hidden="true">#</a> strconv</h2><h3 id="itoa-\u548C-atoi" tabindex="-1"><a class="header-anchor" href="#itoa-\u548C-atoi" aria-hidden="true">#</a> Itoa \u548C Atoi</h3><p><strong>int \u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\uFF1A<code>Itoa()</code></strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// a32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>\u6E90\u7801</summary><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// Itoa is equivalent to FormatInt(int64(i), 10).</span>
<span class="token keyword">func</span> <span class="token function">Itoa</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>\u5B57\u7B26\u4E32\u8F6C<code>int</code>\uFF1A<code>Atoi()</code></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// \u5B57\u7B26\u4E32\u8F6C int</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token string">&quot;12&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8F93\u51FA</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">12</span> <span class="token operator">&lt;</span>nil<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u6CE8\u610F\u5B83\u7684\u8FD4\u56DE\u503C\u6709 2 \u4E2A\uFF0C\u4E00\u4E2A\u662F<code>int</code>\u7C7B\u578B\uFF0C\u4E00\u4E2A\u662F<code>error</code>\u7C7B\u578B</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// \u5B57\u7B26\u4E32\u8F6C int</span>
data<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token string">&quot;12&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8F6C\u6362\u5931\u8D25</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parse-\u7C7B\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#parse-\u7C7B\u51FD\u6570" aria-hidden="true">#</a> Parse \u7C7B\u51FD\u6570</h3><blockquote><p>Parse \u7C7B\u51FD\u6570\u7528\u4E8E\u8F6C\u6362\u5B57\u7B26\u4E32\u4E3A\u7ED9\u5B9A\u7684\u7C7B\u578B\u7684\u503C\uFF1A<code>ParseBool()</code>\u3001<code>ParseFloat()</code>\u3001<code>ParseInt()</code>\u3001<code>ParseUint()</code>\u3002</p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>b<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span> <span class="token comment">// \u8FD9\u91CC\u53EF\u4EE5\u5199 True \u6216\u8005 False \u53EF\u4EE5\u63A5\u6536\u5927\u5199\u5F00\u5934</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// true</span>

b<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// strconv.ParseBool: parsing &quot;q&quot;: invalid syntax</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// false \u5B9E\u9645\u4E0A\u8FD9\u91CC\u662F\u8F6C\u6362\u5931\u8D25\u7684</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>b<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;3.1435&quot;</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// &lt;nil&gt;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 3.1435 \u4E14\u7C7B\u578B\u4E3A float64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u7528\u6765\u6307\u660E\u8F6C\u6362\u4E3A\uFF1A<code>float64</code>\u8FD8\u662F<code>float32</code></p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>b<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;3.1435&quot;</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// &lt;nil&gt;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 3.1435000896453857</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// float64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u8FD9\u91CC\u8FD8\u662F\u8F6C\u6362\u4E3A\`float64\`</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ParseFloat</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	f<span class="token punctuation">,</span> n<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">parseFloatPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> bitSize<span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>NumError<span class="token punctuation">)</span><span class="token punctuation">.</span>Err <span class="token operator">!=</span> ErrSyntax<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">syntaxError</span><span class="token punctuation">(</span>fnParseFloat<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> f<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">parseFloatPrefix</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> bitSize <span class="token operator">==</span> <span class="token number">32</span> <span class="token punctuation">{</span>
		f<span class="token punctuation">,</span> n<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">atof32</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">float64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">atof64</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u770B\u5230\u6E90\u7801\u7B2C 12 \u884C\uFF0C\u8FD4\u56DE\u7684\u8FD8\u662F<code>float64</code>\uFF0C\u5B83\u4F1A\u4E0D\u4F1A\u540E\u9762\u6539\u6389\u5C31\u4E0D\u77E5\u9053\u4E86\u3002</p></div><p><code>ParseInt()</code>\u548C<code>ParseUint()</code>\u6709 3 \u4E2A\u53C2\u6570</p><ol><li><code>bitSize</code>\u53C2\u6570\u6807\u8BC6\u8F6C\u6362\u4E3A\u4EC0\u4E48\u4F4D\u7684<code>int/uint</code>\uFF0C\u6709\u6548\u503C\u4E3A<code>0,8,16,32,64</code>\u3002\u5F53<code>bitSize = 0</code>\u7684\u65F6\u5019\uFF0C\u6807\u8BC6\u8F6C\u6362\u4E3A<code>int</code>\u6216\u8005<code>uint</code>\u7C7B\u578B\uFF0C\u4F8B\u5982<code>bitSize=8</code>\u8868\u793A\u8F6C\u6362\u4E3A<code>int8/uint8</code></li><li><code>base</code>\u53C2\u6570\u6807\u8BC6\u4EE5\u4EC0\u4E48\u8FDB\u5236\u7684\u65B9\u5F0F\u53BB\u89E3\u6790\u7ED9\u5B9A\u7684\u5B57\u7B26\u4E32\uFF0C\u6709\u6548\u503C\u4E3A\uFF1A<code>0,2-36</code>\u3002\u5F53<code>base = 0</code>\u7684\u65F6\u5019\uFF0C\u8868\u793A\u6839\u636E<code>string</code>\u7684\u524D\u7F00\u6765\u5224\u65AD\u4EE5\u4EC0\u4E48\u8FDB\u5236\u53BB\u89E3\u6790\uFF1A<code>0x</code>\u5F00\u5934\u7684\u4EE5 16 \u8FDB\u5236\u7684\u65B9\u5F0F\u53BB\u89E3\u6790\uFF0C<code>0</code>\u5F00\u5934\u7684\u4EE5 8 \u8FDB\u5236\u7684\u65B9\u5F0F\u53BB\u89E3\u6790\uFF0C\u5176\u4ED6\u7684\u4EE5 10 \u8FDB\u5236\u7684\u65B9\u5F0F\u89E3\u6790\u3002</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>b<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// &lt;nil&gt;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 3</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// int64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u5F53<code>bitSize = 0</code>\u7684\u65F6\u5019\u4F1A\u6309\u7167\u4E0B\u9762\u7684\u65B9\u5F0F\u53BB\u83B7\u53D6\u8FD4\u56DE\u7684\u7C7B\u578B</p><p><code>const intSize = 32 &lt;&lt; (^uint(0) &gt;&gt; 63)</code></p></blockquote><details class="custom-container details"><summary>\u6E90\u7801</summary><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ParseInt</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> fnParseInt <span class="token operator">=</span> <span class="token string">&quot;ParseInt&quot;</span>

   <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">syntaxError</span><span class="token punctuation">(</span>fnParseInt<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// Pick off leading sign.</span>
   s0 <span class="token operator">:=</span> s
   neg <span class="token operator">:=</span> <span class="token boolean">false</span>
   <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">{</span>
      s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span> <span class="token punctuation">{</span>
      neg <span class="token operator">=</span> <span class="token boolean">true</span>
      s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// Convert unsigned and check range.</span>
   <span class="token keyword">var</span> un <span class="token builtin">uint64</span>
   un<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">ParseUint</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> base<span class="token punctuation">,</span> bitSize<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>NumError<span class="token punctuation">)</span><span class="token punctuation">.</span>Err <span class="token operator">!=</span> ErrRange <span class="token punctuation">{</span>
      err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>NumError<span class="token punctuation">)</span><span class="token punctuation">.</span>Func <span class="token operator">=</span> fnParseInt
      err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>NumError<span class="token punctuation">)</span><span class="token punctuation">.</span>Num <span class="token operator">=</span> s0
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
   <span class="token punctuation">}</span>

   <span class="token keyword">if</span> bitSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      bitSize <span class="token operator">=</span> IntSize
   <span class="token punctuation">}</span>

   cutoff <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">uint</span><span class="token punctuation">(</span>bitSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> <span class="token operator">!</span>neg <span class="token operator">&amp;&amp;</span> un <span class="token operator">&gt;=</span> cutoff <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">int64</span><span class="token punctuation">(</span>cutoff <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rangeError</span><span class="token punctuation">(</span>fnParseInt<span class="token punctuation">,</span> s0<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> neg <span class="token operator">&amp;&amp;</span> un <span class="token operator">&gt;</span> cutoff <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token function">int64</span><span class="token punctuation">(</span>cutoff<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rangeError</span><span class="token punctuation">(</span>fnParseInt<span class="token punctuation">,</span> s0<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   n <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>un<span class="token punctuation">)</span>
   <span class="token keyword">if</span> neg <span class="token punctuation">{</span>
      n <span class="token operator">=</span> <span class="token operator">-</span>n
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u770B\u5230<code>bitSize = 0</code>\u7684\u65F6\u5019\uFF0C\u6700\u7EC8\u8FD8\u662F\u4F1A\u4EE5 <code>int64</code>\u8F6C\u6362\u8FD4\u56DE</p></details><h2 id="format-\u7C7B\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#format-\u7C7B\u51FD\u6570" aria-hidden="true">#</a> Format \u7C7B\u51FD\u6570</h2><blockquote><p>\u5C06\u7ED9\u5B9A\u7684\u7C7B\u578B\u683C\u5F0F\u5316\u4E3A<code>string</code>\u7C7B\u578B\uFF1A<code>FormatBool()</code>\u3001<code>FormatFloat()</code>\u3001<code>FormatInt()\u3001FormatUint()</code></p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatBool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// true</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span><span class="token number">3.1415</span><span class="token punctuation">,</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 3.1415E+00</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">FormatFloat</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">,</span> fmt <span class="token builtin">byte</span><span class="token punctuation">,</span> prec<span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token function">genericFtoa</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>prec<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> prec<span class="token punctuation">,</span> bitSize<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>FormatFloat</code>\u53C2\u6570\u4F17\u591A\uFF1A</p><p><code>bitSize</code>\uFF1A\u8868\u793A<code>f</code>\u7684\u6765\u6E90\u7C7B\u578B(<code>float32</code>,<code>float64</code>)\uFF0C\u4F1A\u636E\u6B64\u8FDB\u884C\u820D\u5165\u3002</p><p><code>fmt</code>\u8868\u793A\u683C\u5F0F\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token char">&#39;b&#39;</span> <span class="token punctuation">(</span><span class="token operator">-</span>ddddp\xB1ddd<span class="token punctuation">,</span> a binary exponent<span class="token punctuation">)</span><span class="token punctuation">,</span> \u6307\u6570\u4E3A\u4E8C\u8FDB\u5236
<span class="token char">&#39;e&#39;</span> <span class="token punctuation">(</span><span class="token operator">-</span>d<span class="token punctuation">.</span>dddde\xB1dd<span class="token punctuation">,</span> a decimal exponent<span class="token punctuation">)</span><span class="token punctuation">,</span> \u5341\u8FDB\u5236\u6307\u6570
<span class="token char">&#39;E&#39;</span> <span class="token punctuation">(</span><span class="token operator">-</span>d<span class="token punctuation">.</span>ddddE\xB1dd<span class="token punctuation">,</span> a decimal exponent<span class="token punctuation">)</span><span class="token punctuation">,</span> \u5341\u8FDB\u5236\u6307\u6570
<span class="token char">&#39;f&#39;</span> <span class="token punctuation">(</span><span class="token operator">-</span>ddd<span class="token punctuation">.</span>dddd<span class="token punctuation">,</span> no exponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token char">&#39;g&#39;</span> <span class="token punctuation">(</span><span class="token char">&#39;e&#39;</span> <span class="token keyword">for</span> large exponents<span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span> otherwise<span class="token punctuation">)</span><span class="token punctuation">,</span> \u6307\u6570\u5F88\u5927\u662F\u7528\u5B83\uFF0C\u5426\u5219 f \u683C\u5F0F
<span class="token char">&#39;G&#39;</span> <span class="token punctuation">(</span><span class="token char">&#39;E&#39;</span> <span class="token keyword">for</span> large exponents<span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span> otherwise<span class="token punctuation">)</span><span class="token punctuation">,</span> \u540C\u4E0A
<span class="token char">&#39;x&#39;</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0xd</span><span class="token punctuation">.</span>ddddp\xB1ddd<span class="token punctuation">,</span> a hexadecimal fraction and binary exponent<span class="token punctuation">)</span><span class="token punctuation">,</span> or
<span class="token char">&#39;X&#39;</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0Xd</span><span class="token punctuation">.</span>ddddP\xB1ddd<span class="token punctuation">,</span> a hexadecimal fraction and binary exponent<span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>prec</code>\u63A7\u5236\u7CBE\u5EA6(\u6392\u9664\u6307\u6570\u90E8\u5206)\uFF0C\u5BF9<code>f\u3001e\u3001E</code>\uFF0C\u5B83\u8868\u793A\u5C0F\u6570\u70B9\u540E\u9762\u7684\u6570\u5B57\u4E2A\u6570\uFF1B\u5BF9<code>g\u3001G</code>\u5B83\u63A7\u5236\u603B\u7684\u6570\u5B57\u4E2A\u6570\u3002\u5982\u679C<code>prec</code>\u4E3A-1\uFF0C\u5219\u4EE3\u8868\u4F7F\u7528\u6700\u5C11\u91CF\u7684\uFF0C\u4F46\u53C8\u5FC5\u987B\u7684\u6570\u5B57\u6765\u8868\u793A<code>f</code></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// \u5C06-42\u8F6C\u6362\u4E3A16\u8FDB\u5236</span>
s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// -2a</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatUint</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 2a</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),o=[e];function c(i,l){return s(),a("div",null,o)}var d=n(p,[["render",c],["__file","go-data-convert.html.vue"]]);export{d as default};
