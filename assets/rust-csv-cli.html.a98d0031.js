import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as c,c as l,a as n,b as t,e as a,d as s}from"./app.75f63fbd.js";const i={},u=a(`<h1 id="\u5904\u7406-csv" tabindex="-1"><a class="header-anchor" href="#\u5904\u7406-csv" aria-hidden="true">#</a> \u5904\u7406 csv</h1><h2 id="\u4F7F\u7528-clap" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528-clap" aria-hidden="true">#</a> \u4F7F\u7528 clap</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo <span class="token function">add</span> clap --featres derive
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u4F7F\u7528<code>derive</code>\u65B9\u5F0F\uFF0C<code>features</code>\u7528\u6765\u8C03\u6574\u4E00\u4E2A\u9879\u76EE\u7684\u4E0D\u540C\u7684\u529F\u80FD\u5185\u5BB9\u3002</p>`,4),r={href:"https://docs.rs/clap/latest/clap/",target:"_blank",rel:"noopener noreferrer"},d=s("\u6587\u6863"),k=a(`<p>\u76EE\u6807\u8003\u8651: <code>rcli csv -i input.csv -o output.json --header -d &#39;,&#39;</code></p><p><code>clap</code>\u662F<code>rust</code>\u7684\u547D\u4EE4\u884C\u89E3\u6790\u5668</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">clap<span class="token punctuation">::</span></span><span class="token class-name">Parser</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span><span class="token class-name">Debug</span><span class="token punctuation">,</span> <span class="token class-name">Parser</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token attribute attr-name">#[command(name=<span class="token string">&quot;rcli&quot;</span>,version,author, about,long_about=None)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Opts</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[command(subcommand)]</span>
    cmd<span class="token punctuation">:</span> <span class="token class-name">SubCommand</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug, Parser)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">SubCommand</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[command(name = <span class="token string">&quot;csv&quot;</span>, about = <span class="token string">&quot;Show csv, or convert CSV to other formats&quot;</span>)]</span>
    <span class="token class-name">Csv</span><span class="token punctuation">(</span><span class="token class-name">CsvOpts</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token attribute attr-name">#[derive(Debug, Parser)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">CsvOpts</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[arg(short, long)]</span>
    input<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[arg(short, long, default_value = <span class="token string">&quot;output.json&quot;</span>)]</span>
    output<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[arg(short, long, default_value_t = &#39;,&#39;)]</span>
    delimiter<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[arg(short, long, default_value_t = true)]</span>
    header<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> opts <span class="token operator">=</span> <span class="token class-name">Opts</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),v=s("\u51E0\u4E2A\u5B8F\u4ECB\u7ECD\uFF1A"),m={href:"https://docs.rs/clap/latest/clap/_derive/index.html#command-attributes",target:"_blank",rel:"noopener noreferrer"},b=s("\u6587\u6863\u5730\u5740"),g=a(`<ul><li><code>arg</code>: \u53EF\u4EE5\u83B7\u53D6\u7EC8\u7AEF\u8F93\u5165\u7684\u5B57\u7B26\u4E32\u53C2\u6570</li><li><code>command</code>\uFF1A\u5B9A\u4E49\u5BF9\u5E94\u7684\u547D\u4EE4</li><li><code>subcommand</code>: \u5C06\u5B50\u547D\u4EE4\u89E3\u6790\u4E3A\u7528\u6237\u5B9A\u4E49\u7684\u679A\u4E3E\uFF0C\u6240\u4EE5\u4E0B\u9762\u7684<code>CsvOpts</code>\u662F\u4E00\u4E2A\u679A\u4E3E\u7C7B\u578B</li><li><code>Parser</code>: \u5C06\u547D\u4EE4\u884C\u53C2\u6570\u89E3\u6790\u4E3A<code>Self</code></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># \u8FD0\u884C\u8D77\u6765</span>
cargo run

Usage: rcli <span class="token operator">&lt;</span>COMMAND<span class="token operator">&gt;</span>

Commands:
  csv   Show csv, or convert CSV to other formats
  <span class="token builtin class-name">help</span>  Print this message or the <span class="token builtin class-name">help</span> of the given subcommand<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

Options:
  -h, --help     Print <span class="token builtin class-name">help</span>
  -V, --version  Print version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>header</code>\u91CC\u7684<code>short</code>\u5C31\u76F8\u5F53\u4E8E\u8FD9\u4E2A<code>-h</code>\u7684\u6548\u679C\uFF0C\u6211\u4EEC\u53EF\u4EE5\u53BB\u89C4\u907F\u6389\u3002</p><p>\u518D\u6B21\u8FD0\u884C</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo run -- csv -i test.csv

Opts <span class="token punctuation">{</span> cmd: Csv<span class="token punctuation">(</span>CsvOpts <span class="token punctuation">{</span> input: <span class="token string">&quot;test.csv&quot;</span>, output: <span class="token string">&quot;output.json&quot;</span>, delimiter: <span class="token string">&#39;,&#39;</span>, header: <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u9A8C\u8BC1input" tabindex="-1"><a class="header-anchor" href="#\u9A8C\u8BC1input" aria-hidden="true">#</a> \u9A8C\u8BC1<code>input</code></h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug, Parser)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">CsvOpts</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[arg(short, long, value_parser = verify_input_file)]</span>
    input<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[arg(short, long, default_value = <span class="token string">&quot;output.json&quot;</span>)]</span>
    output<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[arg(short, long, default_value_t = &#39;,&#39;)]</span>
    delimiter<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[arg(long, default_value_t = true)]</span>
    header<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u901A\u8FC7<code>value_parser</code>\u5B9A\u4E49\u4E00\u4E2A\u9A8C\u8BC1\u7684\u65B9\u6CD5</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span>

<span class="token comment">/// \u8F93\u5165\u662F\u4E00\u4E2A filename \u6587\u4EF6\u5730\u5740\uFF0C\u8F93\u51FA\u662F\u4E00\u4E2A \u5982\u679C\u5B58\u5728\u5C31\u8FD4\u56DE\u6587\u4EF6\u540D\uFF0C\u4E0D\u5B58\u5728\u5C31\u8FD4\u56DE\u4E00\u4E2A\u9519\u8BEF\u4FE1\u606F</span>
<span class="token keyword">fn</span> <span class="token function-definition function">verify_input_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;File doesn&#39;t exist&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B64\u65F6\u8FD0\u884C<code>cargo run -- csv -i test.csv</code>\u5219\u4F1A\u63D0\u793A\u6587\u4EF6\u4E0D\u5B58\u5728\u3002</p><h2 id="\u5904\u7406csv" tabindex="-1"><a class="header-anchor" href="#\u5904\u7406csv" aria-hidden="true">#</a> \u5904\u7406csv</h2>`,11),h=s("\u8FD9\u91CC\u5F15\u5165\u4E00\u4E2A\u5DE5\u5177"),y={href:"https://duckdb.org/",target:"_blank",rel:"noopener noreferrer"},f=s("duckdb"),w=a(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>duckdb

<span class="token keyword">select</span> * from read_csv<span class="token punctuation">(</span><span class="token string">&#39;assets/juventus.csv&#39;</span>, <span class="token assign-left variable">auto_detect</span><span class="token operator">=</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B64\u65F6\u4F1A\u7ED9\u4F60\u6709\u4E00\u4E2A\u5F88\u7F8E\u89C2\u7684\u4E00\u4E2A\u5C55\u793A\u5185\u5BB9\u3002</p><p>\u5B89\u88C5\u4E00\u4E2A<code>csv</code>\u5E93</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo <span class="token function">add</span> csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5728\u5B89\u88C5\u4E00\u4E2A<code>serde</code>\u4E00\u4E2A<code>rust</code>\u91CC\u795E\u7EA7\u7684\u5E93</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo <span class="token function">add</span> serde --features derive
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5F15\u5165<code>serde</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>use serde::<span class="token punctuation">{</span>Deserialize, Serialize<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5982\u679C\u9700\u8981\u5904\u7406\u4E00\u4E2A<code>csv</code>\u5185\u5BB9\uFF0C\u6B64\u65F6<code>csv</code>\u7684\u8868\u5934\u662F\u6709\u8FD9\u4E48\u51E0\u4E2A\u5C5E\u6027\uFF0C<code>name,position,dob,nationality,kit</code>\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5B9A\u4E49\u4E3A\u4E00\u4E2A\u7ED3\u6784\u4F53</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[allow(dead_code)]</span>
<span class="token attribute attr-name">#[derive(Debug, Deserialize, Serialize)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;Name&quot;</span>)]</span>
    <span class="token keyword">pub</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;Position&quot;</span>)]</span>
    <span class="token keyword">pub</span> position<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;DOB&quot;</span>)]</span>
    <span class="token keyword">pub</span> dob<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;Nationality&quot;</span>)]</span>
    <span class="token keyword">pub</span> nationality<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;Kit Number&quot;</span>)]</span>
    <span class="token keyword">pub</span> number<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#[serde(rename = &quot;Name&quot;)]</code>\u5BF9\u5B57\u6BB5\u8FDB\u884C<code>rename</code>\u7B26\u5408\u771F\u6B63\u7684<code>csv</code>\u5F97\u8868\u5934\u5185\u5BB9\u3002</p><p>\u4F7F\u7528\u6A21\u5F0F\u5339\u914D\u7684\u65B9\u5F0F\u6765\u89E3\u6790\u6570\u636E</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> opts <span class="token operator">=</span> <span class="token class-name">Opts</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> opts<span class="token punctuation">.</span>cmd <span class="token punctuation">{</span>
        <span class="token class-name">SubCommand</span><span class="token punctuation">::</span><span class="token class-name">Csv</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_path</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> records <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>record<span class="token closure-punctuation punctuation">|</span></span> record<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Player</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>record</code>\u662F\u4E00\u4E2A<code>Result</code>\u7C7B\u578B\uFF0C\u6240\u4EE5\u53EF\u4EE5\u4F7F\u7528<code>unwrap</code>\u65B9\u6CD5\u3002\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528<code>for</code>\u5FAA\u73AF\u6765\u6539\u5199</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> opts <span class="token operator">=</span> <span class="token class-name">Opts</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> opts<span class="token punctuation">.</span>cmd <span class="token punctuation">{</span>
        <span class="token class-name">SubCommand</span><span class="token punctuation">::</span><span class="token class-name">Csv</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_path</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> result <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> record<span class="token punctuation">:</span> <span class="token class-name">Player</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u8FD8\u662F\u4F7F\u7528<code>result.unwrap()</code>\u4E0D\u662F\u4E00\u4E2A\u5F88\u597D\u7684\u5904\u7406\u65B9\u6CD5\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528<code>anyhow</code>\u6765\u5904\u7406</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo <span class="token function">add</span> anyhow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u6B64\u65F6<code>main</code>\u51FD\u6570\u5FC5\u987B\u8FD4\u56DE\u4E00\u4E2A<code>Result&lt;()&gt;</code>\uFF0C<code>unwrap</code>\u53EF\u4EE5\u4F7F\u7528<code>?</code>\u6765\u66FF\u4EE3\uFF0C\u8FD9\u4E5F\u662F\u4E00\u4E2A\u6A21\u5F0F\u5339\u914D\u7684\u8FC7\u7A0B\uFF0C\u76F8\u5F53\u4E8E</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">match</span> reader <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">...</span> <span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6240\u4EE5\u8FD9\u91CC\u53EF\u4EE5\u6539\u5199\u6210</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">anyhow<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> opts <span class="token operator">=</span> <span class="token class-name">Opts</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> opts<span class="token punctuation">.</span>cmd <span class="token punctuation">{</span>
        <span class="token class-name">SubCommand</span><span class="token punctuation">::</span><span class="token class-name">Csv</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_path</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> result <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> record<span class="token punctuation">:</span> <span class="token class-name">Player</span> <span class="token operator">=</span> result<span class="token operator">?</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u4F60\u7684<code>Player</code>\u91CC\u9762\u6BCF\u4E2A\u5C5E\u6027\u90FD\u662F\u4EE5\u6CA1\u6709\u5206\u9694\u7B26\u7684\u5C5E\u6027\u540D\u79F0\uFF0C\u90A3\u4E48\u53EF\u4EE5\u5BF9\u7ED3\u6784\u4F53\u8FDB\u884C\u5168\u90E8<code>rename_all</code>\u65B9\u5F0F\uFF0C\u5728\u4E2A\u522B\u5C5E\u6027\u4E0A\u53EF\u4EE5\u5355\u72EC<code>rename</code></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug, Deserialize, Serialize)]</span>
<span class="token attribute attr-name">#[serde(rename_all = <span class="token string">&quot;PascalCase&quot;</span>)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> position<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;DOB&quot;</span>)]</span>
    <span class="token keyword">pub</span> dob<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> nationality<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;Kit Number&quot;</span>)]</span>
    <span class="token keyword">pub</span> number<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u73B0\u5728\u6211\u4EEC\u5DF2\u7ECF\u6210\u529F\u7684\u53EF\u4EE5\u8F93\u51FA\u5728<code>console</code>\u7EC8\u7AEF\u91CC\u663E\u793A\uFF0C\u73B0\u5728\u6211\u4EEC\u9700\u8981\u8F93\u51FA\u5230<code>output.json</code>,\u90A3\u4E48\u6211\u4EEC\u5C31\u9700\u8981\u4E00\u4E2A<code>serde-json</code>\u6765\u5904\u7406</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo <span class="token function">add</span> serde-json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u4E0D\u9700\u8981\u4EFB\u4F55\u7684<code>feature</code>\u3002</p><p><code>#[derive(Debug, Deserialize, Serialize)]</code>\u4E0D\u4EC5\u53EF\u4EE5<code>Deserialize</code>\u6210\u8FD9\u4E2A\u7ED3\u6784\u4F53\uFF0C\u8FD8\u80FD\u4F7F\u7528<code>Serialize</code>\u5E8F\u5217\u5316\u4E3A\u522B\u7684\u683C\u5F0F\u3002</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u62FF\u5230\u6587\u4EF6\u7684\u5185\u5BB9</span>
    <span class="token comment">// let file = File::open(&quot;assets/juventus.csv&quot;)?;</span>
    <span class="token comment">// let mut reader = csv::ReaderBuilder::new()</span>
    <span class="token comment">//     .has_headers(true)</span>
    <span class="token comment">//     .from_reader(file);</span>
    <span class="token comment">// for result in reader.deserialize() {</span>
    <span class="token comment">//     let record: Player = result?;</span>
    <span class="token comment">//     println!(&quot;{:?}&quot;, record.to_json()?);</span>
    <span class="token comment">// }</span>
    <span class="token keyword">let</span> opts <span class="token operator">=</span> <span class="token class-name">Opts</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> opts<span class="token punctuation">.</span>cmd <span class="token punctuation">{</span>
        <span class="token class-name">SubCommand</span><span class="token punctuation">::</span><span class="token class-name">Csv</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_path</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> ret <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> result <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> record<span class="token punctuation">:</span> <span class="token class-name">Player</span> <span class="token operator">=</span> result<span class="token operator">?</span><span class="token punctuation">;</span>
                ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token function">to_string_pretty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
            <span class="token comment">// \u5199\u5165\u8F93\u51FA\u6587\u4EF6</span>
            <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>output<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B64\u65F6\u7EB5\u89C2<code>main.rs</code>\u4EE3\u7801\u5C31\u663E\u5F97\u975E\u5E38\u81C3\u80BF\uFF0C\u6211\u4EEC\u9700\u8981\u5206\u79BB\u51FA\u4E00\u4E2A<code>mod</code></p><h2 id="\u4F18\u5316\u5206\u79BB\u6A21\u5757" tabindex="-1"><a class="header-anchor" href="#\u4F18\u5316\u5206\u79BB\u6A21\u5757" aria-hidden="true">#</a> \u4F18\u5316\u5206\u79BB\u6A21\u5757</h2><p>\u5C06<code>cmd</code>\u90E8\u5206\u62BD\u79BB\u51FA\u6765\u4E3A\u4E00\u4E2A<code>opts.rs</code></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">clap<span class="token punctuation">::</span></span><span class="token class-name">Parser</span><span class="token punctuation">;</span>

<span class="token comment">/// Simple program to deal with csv</span>
<span class="token attribute attr-name">#[derive(Debug, Parser)]</span>
<span class="token attribute attr-name">#[command(name = <span class="token string">&quot;rcli&quot;</span>, version, author, about, long_about = None)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Opts</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[command(subcommand)]</span>
    <span class="token keyword">pub</span> cmd<span class="token punctuation">:</span> <span class="token class-name">SubCommand</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">/// subcommand to show how to convert csv to other file</span>
<span class="token attribute attr-name">#[derive(Debug, Parser)]</span>
<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">SubCommand</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[command(name = <span class="token string">&quot;csv&quot;</span>, about = <span class="token string">&quot;Show csv, or convert CSV to other formats&quot;</span>)]</span>
    <span class="token class-name">Csv</span><span class="token punctuation">(</span><span class="token class-name">CsvOpts</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug, Parser)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CsvOpts</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[arg(short, long, value_parser = verify_input_file)]</span>
    <span class="token keyword">pub</span> input<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[arg(short, long, default_value = <span class="token string">&quot;output.json&quot;</span>)]</span>
    <span class="token keyword">pub</span> output<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[arg(short, long, default_value_t = &#39;,&#39;)]</span>
    <span class="token keyword">pub</span> delimiter<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[arg(long, default_value_t = true)]</span>
    <span class="token keyword">pub</span> header<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">verify_input_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">anyhow<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;File doesn&#39;t exist&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5C06\u5904\u7406<code>csv</code>\u6210\u4E3A<code>json</code>\u7684\u8FDB\u884C\u5206\u79BB\u4E3A<code>process.rs</code></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Reader</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Deserialize</span><span class="token punctuation">,</span> <span class="token class-name">Serialize</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">anyhow<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[allow(dead_code)]</span>
<span class="token attribute attr-name">#[derive(Debug, Deserialize, Serialize)]</span>
<span class="token attribute attr-name">#[serde(rename_all = <span class="token string">&quot;PascalCase&quot;</span>)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;Name&quot;</span>)]</span>
    <span class="token keyword">pub</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;Position&quot;</span>)]</span>
    <span class="token keyword">pub</span> position<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;DOB&quot;</span>)]</span>
    <span class="token keyword">pub</span> dob<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;Nationality&quot;</span>)]</span>
    <span class="token keyword">pub</span> nationality<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[serde(rename = <span class="token string">&quot;Kit Number&quot;</span>)]</span>
    <span class="token keyword">pub</span> number<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">process_csv</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> output<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_path</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> ret <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> result <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> record<span class="token punctuation">:</span> <span class="token class-name">Player</span> <span class="token operator">=</span> result<span class="token operator">?</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token function">to_string_pretty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5199\u5165\u8F93\u51FA\u6587\u4EF6</span>
    <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">\u6CE8\u610F</p><p>\u6211\u4EEC\u8FD9\u91CC\u539F\u5148\u90FD\u6CA1\u6709\u52A0<code>pub</code>\u7684\uFF0C\u73B0\u5728\u90FD\u5F97\u52A0\u4E0A\u4E86\uFF0C\u5426\u5219\u5728\u522B\u7684\u5730\u65B9\u5F15\u7528\u7684\u65F6\u5019\u90A3\u5C31\u662F\u79C1\u6709\u7684\uFF0C\u65E0\u6CD5\u4F7F\u7528\u3002</p></div><p>\u4E3B\u8981\u4F18\u5148\u7684\u8FD8\u662F\u5148\u5B9A\u4E49\u4E00\u4E2A<code>lib.rs</code>\u7528\u4E8E\u5F15\u5165\u6A21\u5757</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">opts</span><span class="token punctuation">;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">process</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token namespace">opts<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Opts</span><span class="token punctuation">,</span> <span class="token class-name">SubCommand</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token namespace">process<span class="token punctuation">::</span></span><span class="token punctuation">{</span>process_csv<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6700\u540E\u7684\u4E3B\u4EE3\u7801</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">clap<span class="token punctuation">::</span></span><span class="token class-name">Parser</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">anyhow<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rcli<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Opts</span><span class="token punctuation">,</span> process_csv<span class="token punctuation">,</span> <span class="token class-name">SubCommand</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> opts <span class="token operator">=</span> <span class="token class-name">Opts</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> opts<span class="token punctuation">.</span>cmd <span class="token punctuation">{</span>
        <span class="token class-name">SubCommand</span><span class="token punctuation">::</span><span class="token class-name">Csv</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// String \u6240\u4EE5\u8FD9\u91CC\u4F7F\u7528\u5F15\u7528\u7C7B\u578B \u53BB\u501F\u7528\u4E00\u4E0B</span>
            <span class="token function">process_csv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opts<span class="token punctuation">.</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opts<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4EE3\u7801\u68C0\u67E5" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u68C0\u67E5" aria-hidden="true">#</a> \u4EE3\u7801\u68C0\u67E5</h2><p>\u6211\u4EEC\u524D\u9762\u4E0B\u8F7D\u4E86\u4E00\u4E2A<code>cargo-deny</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo <span class="token function">install</span> cargo-deny
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u751F\u6210\u4E00\u4E2A\u5BF9\u5E94\u7684\u914D\u7F6E\u6587\u4EF6</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo deny init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u7136\u540E\u4F7F\u7528\u547D\u4EE4\u6765\u68C0\u6D4B</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo deny check -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u6211\u4EEC\u9700\u8981\u5C06<code>advisories</code>\u90E8\u5206\u7684<code>db-path</code>\u548C<code>db-urls</code>\u653E\u5F00\uFF0C\u7136\u540E\u518D\u7EE7\u7EED\u4F7F\u7528<code>cargo deny check -d</code>\u8FDB\u884C\u68C0\u6D4B\uFF0C\u5982\u679C\u63D0\u793A\u4E86\u4E00\u4E9B\u548C<code>advisory-db</code>\u76F8\u5173\u7684\u65E0\u6CD5\u627E\u5230\u7684\u9519\u8BEF\u3002</p><p>\u5219\u4F7F\u7528\u4E00\u4E0B\u547D\u4EE4</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo deny fetch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u6216\u8005\u5C06\u5BF9\u5E94\u7684<code>db-urls</code>\u7684\u662F<code>github</code>\u7684\u5730\u5740\u6362\u6210<code>gitee</code>\u56FD\u5185\u7684\u4E00\u4E9B\u5730\u5740\u3002\u6216\u8005\u81EA\u5DF1\u4E0B\u4E0B\u6765\u653E\u5230\u5BF9\u5E94\u7684\u4F4D\u7F6E\u3002</p><p>\u6700\u540E\u518D\u6B21\u8FDB\u884C<code>cargo deny check -d</code>\u68C0\u6D4B\uFF0C\u5982\u679C\u6709\u9047\u5230\u4E00\u4E9B<code>licenses</code>\u68C0\u6D4B\uFF0C\u5219\u5C06\u5BF9\u5E94\u7684\u90FD\u6DFB\u52A0\u5230<code>[licenses]</code>\u7684<code>allow</code>\u6570\u7EC4\u91CC\uFF0C\u6700\u540E\u81EA\u5DF1\u9879\u76EE\u7684<code>Cargo.toml</code>\u91CC\u4E5F\u9700\u8981\u52A0\u4E0A\u5BF9\u5E94\u7684<code>license = &quot;MIT&quot;</code>\u6216\u8005\u522B\u7684\u4EC0\u4E48\u7248\u6743\u4FE1\u606F\u3002</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo deny check -d

<span class="token number">232</span> \u2502 github <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>
    \u2502           ^ no crate <span class="token builtin class-name">source</span> fell under this organization

warning<span class="token punctuation">[</span>unmatched-organization<span class="token punctuation">]</span>: allowed <span class="token string">&#39;gitlab.com&#39;</span> organization  was not encountered
    \u250C\u2500 /Users/xxx/RustProjects/rcli/deny.toml:234:11
    \u2502
<span class="token number">234</span> \u2502 gitlab <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>
    \u2502           ^ no crate <span class="token builtin class-name">source</span> fell under this organization

warning<span class="token punctuation">[</span>unmatched-organization<span class="token punctuation">]</span>: allowed <span class="token string">&#39;bitbucket.org&#39;</span> organization  was not encountered
    \u250C\u2500 /Users/xxxx/RustProjects/rcli/deny.toml:236:14
    \u2502
<span class="token number">236</span> \u2502 bitbucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>
    \u2502              ^ no crate <span class="token builtin class-name">source</span> fell under this organization

advisories ok, bans ok, licenses ok, sources ok
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6700\u540E\u51FA\u73B0\u8FD9\u6837\u7684\u7ED3\u679C\u5185\u5BB9\u5373\u53EF\uFF0C\u6700\u540E\u63D0\u4EA4\u4EE3\u7801\u3002</p>`,53);function _(q,x){const e=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",r,[d,t(e)])]),k,n("p",null,[v,n("a",m,[b,t(e)])]),g,n("p",null,[h,n("a",y,[f,t(e)])]),w])}var P=p(i,[["render",_],["__file","rust-csv-cli.html.vue"]]);export{P as default};
